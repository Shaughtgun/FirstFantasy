class Character:
  def __init__(self, name):
    self.name = name
    self.hp = 10
    self.mp = 5
    self.atk = 1
    self.df = 1
    self.spd = 1
    self.lvl = 1
    self.xp = 0
    self.lvl_up_xp = 10
    # This defines how fast the xp required ramps up
    self.remaining_xp = (self.lvl_up_xp - self.xp)
# Function for leveling up. Adds stats, and xp till next level
# Prints level and stats for clarity
  def level_up(self):
    print("{name} has leveled up!".format(name=self.name))
    self.lvl += 1
    # Stats go up, here
    self.hp += 10
    self.mp += 5
    self.atk += 1
    self.df += 1
    self.spd += 1
    print("Level: {level}".format(level=self.lvl))
  # This is where xp required is enbiggened
    lvlexponent = 10 + self.lvl ** 2
    self.lvl_up_xp += lvlexponent
    print("Total XP to level {nextlevel}: {nextxp}".format(nextlevel=(self.lvl+1), nextxp=self.lvl_up_xp))
 
  def show_stats(self):
    self.remaining_xp = (self.lvl_up_xp - self.xp)
    print("HP = {hp}, MP = {mp}".format(hp=self.hp, mp=self.mp))
    print("ATK = {atk}, DEF = {df}, SPD = {spd}".format(atk=self.atk, df=self.df, spd=self.spd))
    print("Total XP = {xp}".format(xp=self.xp))
    print("{remaining} xp to level up!".format(remaining=self.remaining_xp))
    print()

# Made add_xp a global function so different characters
# can easily be slotted into it
def add_xp(character, earned_xp):
  character.xp += earned_xp
  if character.xp >= character.lvl_up_xp:
    character.level_up()
    character.show_stats()

# Testing environment    
cloud = Character("Cloud")
# add_xp(cloud, 10)
# add_xp(cloud, 14)
# add_xp(cloud, 19)
# add_xp(cloud, 26)
# add_xp(cloud, 35)


