import random

class Character:
  def __init__(self, name):
    self.name = name
    self.hp = 10
    self.mp = 5
    self.atk = 1
    self.df = 1
    self.spd = 1
    self.lvl = 1
    self.xp = 0
    self.gold = 0
    self.lvl_up_xp = 10
    self.remaining_xp = (self.lvl_up_xp - self.xp)
    self.is_defeated = False
  def __repr__(self):
    reprstring = "{name}: Level {level}".format(name=self.name, level=self.lvl)
    return reprstring
# Function for leveling up. Adds stats, and xp till next level
# Prints level and stats for clarity
  def level_up(self):
    print("{name} has leveled up!".format(name=self.name))
    self.lvl += 1
    # Stats go up, here
    self.hp += 10
    self.mp += 5
    self.atk += 1
    self.df += 1
    self.spd += 1
    print("Level: {level}".format(level=self.lvl))
  # This is where xp required is enbiggened
  # This defines how fast the xp required ramps up
    lvlexponent = 10 + self.lvl ** 2
    self.lvl_up_xp += lvlexponent
    # This could be potentially removed, mostly used for tracking
    print("Total XP to level {nextlevel}: {nextxp}".format(nextlevel=(self.lvl+1), nextxp=self.lvl_up_xp))
 
  def show_stats(self):
    self.remaining_xp = (self.lvl_up_xp - self.xp)
    # To avoid it saying a negative xp required.
    if self.remaining_xp < 0: self.remaining_xp = 0 
    print("HP = {hp}, MP = {mp}".format(hp=self.hp, mp=self.mp))
    print("ATK = {atk}, DEF = {df}, SPD = {spd}".format(atk=self.atk, df=self.df, spd=self.spd))
    print("Total XP = {xp}".format(xp=self.xp))
    print("{remaining} xp to level up!".format(remaining=self.remaining_xp))
    print()

# Made add_xp a global function so different characters
# can easily be slotted into it
def add_xp(character, earned_xp):
  character.xp += earned_xp
  while character.xp >= character.lvl_up_xp:
    character.level_up()
    character.show_stats() 
def add_gold(character, earned_gold):
  character.gold += earned_gold

# Testing environment    
cloud = Character("Cloud")
# add_xp(cloud, 10)
# add_xp(cloud, 5)
# add_xp(cloud, 19)
# add_xp(cloud, 26)
# add_xp(cloud, 35)
# print(cloud)
# cloud.show_stats()
class Monster:
  def __init__(self, name):
    self.name = name
    self.hp = 1
    self.mp = 0
    self.atk = 1
    self.df = 0
    self.spd = 0
    self.xp = 2
    self.gold = 3
    self.is_defeated = False
  def __repr__(self):
    return self.name
  
  def attack_character(self, character):
    character.hp -= self.atk
    if character.hp <= 0:
      print("{self} attacks!".format(self=self.name))
      character.is_defeated = True
    else:
      print("{self} attacks!".format(self=self.name))
      print("{character} has {hp} HP.".format(character=character.name, hp=character.hp))



#### BATTLE MODE !!! #######  

def battle_mode():
  # Spawns mobs for a fight, and puts them into a useable list
  def spawn_mobs(level):
    rand = random.randint(1,3)
    randlist = list(range(rand))
    monsterlist = []
    if level == 1:
      for each in range(rand):
        each = Monster("Glob " + str(each+1))
        monsterlist.append(each)
    elif level == 2:
      for each in range(rand):
        each = Monster("Wolf " + str(each+1))
        monsterlist.append(each)
    return(monsterlist)

  global battle_xp
  global battle_gold
  battle_xp = 0
  battle_gold = 0
  mob_list = spawn_mobs(cloud.lvl)
 
  def attack_mob(mob, dmg):
    mob.hp -= dmg
    if mob.hp <= 0:
      mob.is_defeated = True
      print("You have defeated {mob}!".format(mob=mob.name))
      mob_list.remove(mob)
    else:
      print("{mob} has {hp} HP.".format(mob=mob.name, hp=mob.hp))
  
# The main "Battle happens here and lasts while there are monsters alive"
  while len(mob_list) > 0:
    if cloud.is_defeated == True:
      print("You have been defeated! :(")
      break
    print(mob_list)
    mob_select = input("Which creature would you like to attack? ")
    mob_found = False  
    for mob in mob_list:
      if mob_select.upper() == mob.name.upper():
        mob_found = True
    if mob_found == True:
      for mob in mob_list:
        if mob_select.upper() == mob.name.upper():
          mob_found = True
          attack_mob(mob, cloud.atk)
          if mob.is_defeated == True:
            battle_xp += mob.xp
            battle_gold += mob.gold
      for mob in mob_list:
        mob.attack_character(cloud)      
    else:
      print("Invalid Target")
  if len(mob_list) == 0 and cloud.is_defeated == False:
    print("YOU WIN!")
    print("{char} has earned {xp}XP and {gold} gold!".format(
    char=cloud, xp=battle_xp, gold=battle_gold))
    add_xp(cloud, battle_xp)
    add_gold(cloud, battle_gold)

# print(cloud.xp)
# print(cloud.gold)
battle_mode()


  