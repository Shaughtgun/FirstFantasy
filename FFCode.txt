import random

class Character:
  def __init__(self, name):
    self.name = name
    self.max_hp = 10
    self.current_hp = 10
    self.max_mp = 5
    self.current_mp = 5
    self.atk = 1
    self.df = 1
    self.spd = 1
    self.lvl = 1
    self.xp = 0
    self.gold = 0
    self.lvl_up_xp = 10
    self.remaining_xp = (self.lvl_up_xp - self.xp)
    self.is_defeated = False
  def __repr__(self):
    reprstring = self.name
    return reprstring
# Function for leveling up. Adds stats, and xp till next level
  def level_up(self):
    print("{name} has leveled up!".format(name=self.name))
    self.lvl += 1
    # Stats go up, here
    self.max_hp += 10
    self.max_mp += 5
    self.atk += 1
    self.df += 1
    self.spd += 1
    print("Level: {level}".format(level=self.lvl))
  # This is where xp required is enbiggened
  # This defines how fast the xp required ramps up
    lvlexponent = 10 + self.lvl ** 2
    self.lvl_up_xp += lvlexponent
    # This could be potentially removed, mostly used for tracking
    print("Total XP to level {nextlevel}: {nextxp}".format(nextlevel=(self.lvl+1), nextxp=self.lvl_up_xp))
 
 # Prints level and stats for clarity and testing
  def show_stats(self):
    self.remaining_xp = (self.lvl_up_xp - self.xp)
    # To avoid it saying a negative xp required.
    if self.remaining_xp < 0: self.remaining_xp = 0
    print("HP = {hp1}/{hp2}, MP = {mp1}/{mp2}".format(hp1=self.current_hp, hp2=self.max_hp, mp1=self.current_mp, mp2=self.max_mp))
    print("ATK = {atk}, DEF = {df}, SPD = {spd}".format(atk=self.atk, df=self.df, spd=self.spd))
    print("Total XP = {xp}".format(xp=self.xp))
    print("{remaining} xp to level up!".format(remaining=self.remaining_xp))
    print("Gold: {gold}g".format(gold=self.gold))


# Made add_xp a global function so different characters
# can easily be slotted into it
def add_xp(character, earned_xp):
  character.xp += earned_xp
  while character.xp >= character.lvl_up_xp:
    character.level_up()
    character.show_stats() 
def add_gold(character, earned_gold):
  character.gold += earned_gold

# Testing environment################    
cloud = Character("Cloud")
#####################################
class Monster:
  def __init__(self, name):
    self.name = name
    self.max_hp = 1
    self.current_hp = 1
    self.max_mp = 0
    self.current_mp = 0
    self.atk = 1
    self.df = 0
    self.spd = 0
    self.xp = 2
    self.gold = 3
    self.is_defeated = False
  def __repr__(self):
    return self.name
  
  def attack_character(self, character):
    print("{self} attacks {char} for {dmg} damage!".format(self=self.name, char=character, dmg=self.atk))
    character.current_hp -= self.atk
    if character.current_hp <= 0:
      character.is_defeated = True
    else:
      print("{character} has {hp} HP.".format(character=character, hp=character.current_hp))



#### BATTLE MODE !!! #######  

def battle_mode():
  # Character_list is for the future to implement multiperson teams
  character_list = []
  # Spawns mobs for a fight, and puts them into a useable list
  def spawn_mobs(level):
    num_of_enemies = random.randint(1,3)
    randlist = list(range(num_of_enemies))
    monsterlist = []
    num_of_wolves = 0
    num_of_globs = 0
    if level == 1:
      for each in range(num_of_enemies):
        num_of_globs += 1
        each = Monster("Glob " + str(num_of_globs))
        monsterlist.append(each)
    elif level == 2:
      for each in range(len(randlist)):
        rand2 = random.randint(1,3)
        if rand2 >= 2:
          num_of_wolves += 1 
          each = Monster("Wolf " + str(num_of_wolves))
          monsterlist.append(each)
        elif rand2 < 2:
          num_of_globs += 1
          each = Monster("Glob " + str(num_of_globs))
          monsterlist.append(each)
    return(monsterlist)

  global battle_xp
  global battle_gold
  battle_xp = 0
  battle_gold = 0
  mob_list = spawn_mobs(cloud.lvl)
 
  def attack_mob(mob, dmg):
    mob.current_hp -= dmg
    if mob.current_hp <= 0:
      mob.is_defeated = True
      print("You have defeated {mob}!".format(mob=mob.name))
      mob_list.remove(mob)
    else:
      print("{mob} has {hp} HP.".format(mob=mob.name, hp=mob.current_hp))
  
# The main "Battle happens here and lasts while there are monsters alive"
  while len(mob_list) > 0:
    if cloud.is_defeated == True:
      print("You have been defeated! :(")
      global game_ended
      game_ended = True
      break
    print(mob_list)
    mob_select = input("Which creature would you like to attack? ")
    mob_found = False  
    #This section is just to address typos for monsters
    for mob in mob_list:
      if mob_select.upper() == mob.name.upper():
        mob_found = True
    #If no typos, battle occurs as expected
    if mob_found == True:
      for mob in mob_list:
        if mob_select.upper() == mob.name.upper():
          attack_mob(mob, cloud.atk)
          if mob.is_defeated == True:
            battle_xp += mob.xp
            battle_gold += mob.gold
      for mob in mob_list:
        mob.attack_character(cloud)  
    #If there are typos it loops back to input stage    
    else:
      print("Invalid Target")
  if len(mob_list) == 0 and cloud.is_defeated == False:
    print("YOU WIN!")
    print("{char} has earned {xp}XP and {gold} gold!".format(
    char=cloud, xp=battle_xp, gold=battle_gold))
    add_xp(cloud, battle_xp)
    add_gold(cloud, battle_gold)
###########    End of battle mode ##########################

#########################################
############### Food mode ###############
#########################################

# Dict = Food: [Price, heal amount]
food_dict = {
      "Apple": [3, 1], "Hummus": [5, 2], "Gyro": [15, 3]
    }
def food():
  food_menu = "| "
  food_found = False
  
  # Function to take food and add it to characters hp
  def heal(food, character):
    #print(food_dict[food][1])
    character.current_hp += food_dict[food][1]
    if character.current_hp > character.max_hp:
      character.current_hp = character.max_hp
    print(character.name + " has {current}/{maxhp} HP".format(current=character.current_hp, maxhp=character.max_hp))
    print(character.name + " has {gold} remaining".format(gold=character.gold))
  
  for key in food_dict:
    food_menu += key + ": " + str(food_dict[key][0]) + "g | "
  while food_found == False:
    print(food_menu)
    print("| type 'back' to go to previous menu |")
    food_select = input("What would you like to eat? ")
    food = food_select.title()
    if food in food_dict == False:
      print("Invalid Selection")
    elif food in food_dict and cloud.gold >= food_dict[food][0]:
      food_found = True
      heal(food, cloud)
    elif food in food_dict and cloud.gold < food_dict[food][0]:
      print("You do not have enough money. You are poor. :(")
    elif food == "Back":
      food_found = True
      main_menu()
      

###########################################
##########END OF FOOD MODE#################
###########################################

############-MODE SELECTION-###############

game_ended = False
def main_menu():
  while game_ended == False:
    print("_____________________________")
    print("| Battle | Eat | Show Stats |")
    print("-----------------------------")
    menu_selection = input("What would you like to do? ")
    if menu_selection.upper() == "BATTLE":
      battle_mode()
    elif menu_selection.upper() == "EAT":
      food()
    elif menu_selection.upper() == "SHOW STATS":
      name_formatting = "___"
      for i in cloud.name:
        name_formatting += "_"
      name_formatting += "___"
      print(name_formatting)
      print("---{name}---".format(name=cloud.name))
      print(name_formatting)
      cloud.show_stats()
      go_back = input("Press Enter go to main menu\n")
      if go_back.upper() != None:
        main_menu()
    else:
      print("")
      print("Invalid Selection")

main_menu()

# battle_mode()
# print(food_dict)
# food()
# cloud.show_stats()



  